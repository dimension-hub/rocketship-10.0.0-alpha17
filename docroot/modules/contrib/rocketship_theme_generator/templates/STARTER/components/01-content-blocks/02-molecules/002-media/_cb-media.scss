////////////////////////////////////////////////////////////////////////////////
// *
// * Content Block: Media (for image and video)
// *
////////////////////////////////////////////////////////////////////////////////


// * In 1-col layout
// =============================================================================

.block--type-cb-image,
.block--type-cb-video,
.block--type-cb-media {
  position: relative;

  .field--type-image {
    img {
      display: block;
      margin: 0;
    }
  }

  // link around image
  .cb-image__link {
    display: block;
  }

  // in case of link field: stretch the link over the complete block
  .field--name-field-cb-image-wrapper-link,
  .field--name-field-cb-link {
    position: absolute;
    z-index: 10;
    top: 0;
    left: 0;
    display: block;
    overflow: hidden;
    height: 100%;
    width: 100%;

    a {
      &,
      &:visited,
      &:hover,
      &:active {
        position: absolute;
        top: 0;
        left: 0;
        display: block;
        height: 100%;
        width: 100%;
        border: 0 none;
        text-decoration: none;
        text-indent: -9999px;
      }
    }
  }

  // don't need the img name bc alt tag exists
  .field--name-name {
    display: none;
  }

  img {
    display: block;
  }

  .media--view-mode-video-colorbox-modal {
    cursor: pointer;
  }
}


// ** makes the image stretch to the side of the document window

.cb--layout-mode--stretched {

  .layout--content-blocks & {

    // -- Default: 1-col

    // place in middle as starting point
    left: 50%;
    // overrides the bottom margin reset from _00-block.scss
    margin-top: 0;
    // size to fill window width
    width: 100vw;
    // pull back to edge of window
    transform: translateX(-50vw);

    img {
      width: 100%;
      max-width: none;
    }

    // negate the spacing from the layout
    // top if first in column
    &:first-child,
    &.first-child {
      margin-top: rem(-$cb-gap-vert-top-xs);
    }

    // bottom, if last in column
    &:last-child,
    &.last-child {
      margin-bottom: rem(-$cb-gap-vert-bottom-xs);
    }

  }

  .layout--v-space-top-0x &:first-child ,
  .layout--v-space-top-0x &.first-child {
    margin-top: 0;
  }

  .layout--v-space-top-minimal &:first-child,
  .layout--v-space-top-minimal &.first-child {
    margin-top: rem(-$cb-gap-vert-minimal);
  }

  .layout--v-space-top-medium &:first-child,
  .layout--v-space-top-medium &.first-child {
    margin-top: rem(-$cb-gap-vert-medium);
  }

  @for $i from 2 through 5 {
    .layout--v-space-top-#{$i} &:first-child,
    .layout--v-space-top-#{$i} &.first-child {
      margin-top: rem(-$cb-gap-vert-top-xs * $i);
    }
  }

  .layout--v-space-bottom-0x &:last-child,
  .layout--v-space-bottom-0x &.last-child {
    margin-bottom: 0;
  }

  .layout--v-space-bottom-minimal &:first-child,
  .layout--v-space-bottom-minimal &.first-child {
    margin-bottom: rem(-$cb-gap-vert-minimal);
  }

  .layout--v-space-bottom-medium &:first-child,
  .layout--v-space-bottom-medium &.first-child {
    margin-bottom: rem(-$cb-gap-vert-medium);
  }

  @for $i from 2 through 5 {
    .layout--v-space-bottom-#{$i} &:last-child,
    .layout--v-space-bottom-#{$i} &.last-child {
      margin-bottom: rem(-$cb-gap-vert-bottom-xs * $i);
    }

  }

}

// ** resetting some defaults

.node .block--type-cb-image,
.node .block--type-cb-video,
.node .block--type-cb-media {
  .field--type-image {
    float: none;
    margin: 0;
  }
}


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// * Breakpoint: phone only
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

@include bp-xs-only {

  .cb--layout-mode--stretched {

    // -- resets block margin overrides for multi-col layouts
    //    (because they render as 1 col on phone size screen)

    // 2-col: for stretched images in the top part
    .layout__sidebar--2-col & {

      &:last-child,
      &.last-child {
        margin-bottom: 0;
      }
    }

    // 2-col: for stretched images in the bottom part
    .layout__content--2-col & {

      // &:first-child,
      // &.first-child {
      //   margin-top: 0;
      // }
    }

    // 3-col: for stretched images in the top part
    .layout__sidebar--3-col--content-blocks--left & {
      //
    }

    // 3-col: for stretched images in the bottom part
    .layout__sidebar--3-col--content-blocks--right {

      &:first-child,
      &.first-child {
        margin-top: 0;
      }
    }

    // 4-col: for stretched images in the top part
    .layout__region--4-col--content-blocks--left & {
      //
    }

    // 4-col: for stretched images in the bottom part
    .layout__region--4-col--content-blocks--right {

      &:first-child,
      &.first-child {
        margin-top: 0;
      }
    }

    // // -- If 2 have matching background-colors on the Layout

    // .layout--content-blocks.has-matching-bg & {
    //   // There is no top padding, so don't compensate for it
    //   margin-top: 0;
    // }

  }
}


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// * Breakpoint: tablet & wider
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

@include bp-sm {

  .cb--layout-mode--stretched {

    .layout--content-blocks & {

      top: 0;

      // ** makes the image stretch to the side of the document window

      // -- Default: 1-col

      // place in middle as starting point
      left: 50%;

      overflow: hidden; // prevent stretched image from ruining stuff
      // size to fill window width
      width: 100vw;
      // pull back to edge of window
      transform: translateX(-50vw);

      // negate the spacing from the layout
      // top if first in column
      &:first-child,
      &.first-child {
        margin-top: rem(-$cb-gap-vert-top-sm);
      }

      // bottom, if last in column
      // this also overrides the bottom margin reset
      // from the default content-block styling for last-child in a column
      &:last-child,
      &.last-child {
        margin-bottom: rem(-$cb-gap-vert-bottom-sm);
      }

    }

    .layout--v-space-top-0x &:first-child,
    .layout--v-space-top-0x &.first-child {
      margin-top: 0;
    }

    .layout--v-space-top-minimal &:first-child,
    .layout--v-space-top-minimal &.first-child {
      margin-top: rem(-$cb-gap-vert-minimal);
    }

    .layout--v-space-top-medium &:first-child,
    .layout--v-space-top-medium &.first-child {
      margin-top: rem(-$cb-gap-vert-medium);
    }

    @for $i from 2 through 5 {
      .layout--v-space-top-#{$i} &:first-child,
      .layout--v-space-top-#{$i} &.first-child {
        margin-top: rem(-$cb-gap-vert-top-sm * $i);
      }
    }

    .layout--v-space-bottom-0x &:last-child,
    .layout--v-space-bottom-0x &.last-child {
      margin-bottom: 0;
    }

    .layout--v-space-bottom-minimal &:first-child,
    .layout--v-space-bottom-minimal &.first-child {
      margin-bottom: rem(-$cb-gap-vert-minimal);
    }

    .layout--v-space-bottom-medium &:first-child,
    .layout--v-space-bottom-medium &.first-child {
      margin-bottom: rem(-$cb-gap-vert-medium);
    }

    @for $i from 2 through 5 {
      .layout--v-space-bottom-#{$i} &:last-child,
      .layout--v-space-bottom-#{$i} &.last-child {
        margin-bottom: rem(-$cb-gap-vert-bottom-sm * $i);
      }
    }

    img {
      width: 100%;
      max-width: none;
    }

    .video-embed-field-responsive-video {
      position: static;
    }

    // -- rework block spacing and positioning for multi-col layouts

    .layout--2-col--content-blocks &,
    .layout--3-col--content-blocks &,
    .layout--4-col--content-blocks & {
      position: absolute;
      height: 100%;

      // with the block positioned absolutely,
      // no need to worry about spacing,
      // since block will overlap with the layout padding
      &:first-child,
      &.first-child {
        margin-top: 0;
      }
      &:last-child,
      &.last-child {
        margin-bottom: 0;
      }

      img {
        position: absolute;
        top: 0;
        right: 0;
        //height: auto;
        //width: 50vw;
        height: 100%;
        width: auto;
        min-width: 50vw;
        max-width: none;
        object-fit: cover; // keep image in ratio (not in IE)
      }

      // when img has extra wrappers (eg. media field, or blazy or lazy loaders)
      // having a position messes things up
      // so we either turn it off on that wrapper
      // or make it stretch along with the block to accomodate the stretching img
      // basically, match what the sidebar div is doing
      .media,
      .drimage,
      .lazy-wrapper,
      picture {
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
      }
    }

    // ** positioning & sizing depending on col size

    // -- In a 2-col layout
    // =============================================================================

    // default: 1/2
    .layout--2-col--content-blocks & {
      width: (100vw / 2);
    }

    // diff col sizes
    .layout__region--size-1-3 & {
      width: (100vw / 2);
    }

    .layout__region--size-2-3 & {
      width: (100vw / 2);
    }

    .layout__region--size-1-4 & {
      width: (100vw / 2);
    }

    .layout__region--size-3-4 & {
      width: (100vw / 2);
    }

    .layout__region--size-5-12 & {
      width: (100vw / 2);
    }

    .layout__region--size-7-12 & {
      width: (100vw / 2);
    }

    // for stretched images on the right side
    .layout__sidebar--2-col--content-blocks--right &,
    .layout__content--2-col--content-blocks--right & {
      right: 50%;
      left: auto;
      transform: translateX(50vw);

      img {
        right: auto;
        left: 0;
      }
    }

    // -- In a 3-col layout
    // =============================================================================

    .layout--3-col--content-blocks & {
      width: (100vw / 3);
    }

    // TO DO: positioning depending on which col, img width, …


    // -- In a 4-col layout
    // =============================================================================

    .layout--4-col--content-blocks & {
      width: (100vw / 4);
    }

    // TO DO: positioning depending on which col, img width, …


    // -- If 2 have matching background-colors on the Layout

    .layout--content-blocks.has-matching-bg & {
      // There is no top padding, so don't compensate for it
      &:first-child,
      &.first-child {
        margin-top: 0;
      }
    }

  }
}


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// * Breakpoint: desktop & wider
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

@include bp-md {

  .cb--layout-mode--stretched {

    .layout--content-blocks & {

      // negate the spacing from the layout
      // top if first in column
      &:first-child,
      &.first-child {
        margin-top: rem(-$cb-gap-vert-top-md);
      }

      // bottom, if last in column
      // this also overrides the bottom margin reset
      // from the default content-block styling for last-child in a column
      &:last-child,
      &.last-child {
        margin-bottom: rem(-$cb-gap-vert-bottom-md);
      }

    }

    .layout--v-space-top-0x &:first-child,
    .layout--v-space-top-0x &.first-child {
      margin-top: 0;
    }

    .layout--v-space-top-minimal &:first-child,
    .layout--v-space-top-minimal &.first-child {
      margin-top: rem(-$cb-gap-vert-minimal);
    }

    .layout--v-space-top-medium &:first-child,
    .layout--v-space-top-medium &.first-child {
      margin-top: rem(-$cb-gap-vert-medium);
    }

    @for $i from 2 through 5 {
      .layout--v-space-top-#{$i} &:first-child,
      .layout--v-space-top-#{$i} &.first-child {
        margin-top: rem(-$cb-gap-vert-top-md * $i);
      }
    }


    .layout--v-space-bottom-0x &:last-child,
    .layout--v-space-bottom-0x &.last-child {
      margin-bottom: 0;
    }

    .layout--v-space-bottom-minimal &:first-child,
    .layout--v-space-bottom-minimal &.first-child {
      margin-bottom: rem(-$cb-gap-vert-minimal);
    }

    .layout--v-space-bottom-medium &:first-child,
    .layout--v-space-bottom-medium &.first-child {
      margin-bottom: rem(-$cb-gap-vert-medium);
    }

    @for $i from 2 through 5 {
      .layout--v-space-bottom-#{$i} &:last-child,
      .layout--v-space-bottom-#{$i} &.last-child {
        margin-bottom: rem(-$cb-gap-vert-bottom-md * $i);
      }

    }

    // -- rework block spacing and positioning for multi-col layouts

    .layout--2-col--content-blocks &,
    .layout--3-col--content-blocks &,
    .layout--4-col--content-blocks & {
      // with the block positioned absolutely,
      // no need to worry about spacing,
      // since block will overlap with the layout padding
      &:first-child,
      &.first-child {
        margin-top: 0;
      }
      &:last-child ,
      &.last-child {
        margin-bottom: 0;
      }
    }

    // ** If 2 have matching background-colors on the Layout

    .layout--content-blocks.has-matching-bg & {
      // There is no top padding, so don't compensate for it
      &:first-child,
      &.first-child {
        margin-top: 0;
      }
    }

    // ** positioning & sizing depending on col size

    .layout__region--size-1-3 & {
      width: (100vw / 3); // calc(#{100vw / 2} - #{(100% / 3) / 1} - #{rem(($cb-gap-hor / 1) / 3)});
    }

    .layout__region--size-2-3 & {
      width: (100vw / 3 * 2); // calc(#{100vw / 2} + #{(100% / 3) / 2} + #{rem(($cb-gap-hor / 2) / 3)});
    }

    .layout__region--size-1-4 & {
      width: (100vw / 4); // calc(#{100vw / 2} - #{100% / 4} - #{rem($cb-gap-hor / 4)});
    }

    .layout__region--size-3-4 & {
      width: (100vw / 4 * 3); // calc(#{100vw / 2} + #{100% / 4} + #{rem($cb-gap-hor / 4)});
    }

  }

}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// * Breakpoint: large
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

@include bp-lg {

  .cb--layout-mode--stretched {

    .layout--content-blocks & {
      // negate the spacing from the layout
      // top if first in column
      &:first-child,
      &.first-child {
        margin-top: rem(-$cb-gap-vert-top-lg-2);
      }

      // bottom, if last in column
      // this also overrides the bottom margin reset
      // from the default content-block styling for last-child in a column
      &:last-child,
      &.last-child {
        margin-bottom: rem(-$cb-gap-vert-bottom-lg-2);
      }

    }

    .layout--v-space-top-0x &:first-child,
    .layout--v-space-top-0x &.first-child {
      margin-top: 0;
    }

    .layout--v-space-top-minimal &:first-child,
    .layout--v-space-top-minimal &.first-child {
      margin-top: rem(-$cb-gap-vert-minimal);
    }

    .layout--v-space-top-medium &:first-child,
    .layout--v-space-top-medium &.first-child {
      margin-top: rem(-$cb-gap-vert-medium);
    }

    @for $i from 2 through 5 {
      .layout--v-space-top-#{$i} &:first-child,
      .layout--v-space-top-#{$i} &.first-child {
        margin-top: rem(-$cb-gap-vert-top-lg-2 * $i);
      }
    }


    .layout--v-space-bottom-0x &:last-child,
    .layout--v-space-bottom-0x &.last-child {
      margin-bottom: 0;
    }

    .layout--v-space-bottom-minimal &:first-child,
    .layout--v-space-bottom-minimal &.first-child {
      margin-bottom: rem(-$cb-gap-vert-minimal);
    }

    .layout--v-space-bottom-medium &:first-child,
    .layout--v-space-bottom-medium &.first-child {
      margin-bottom: rem(-$cb-gap-vert-medium);
    }

    @for $i from 2 through 5 {
      .layout--v-space-bottom-#{$i} &:last-child,
      .layout--v-space-bottom-#{$i} &.last-child {
        margin-bottom: rem(-$cb-gap-vert-bottom-lg-2 * $i);
      }

    }

    // ** If 2 have matching background-colors on the Layout

    .layout--content-blocks.has-matching-bg & {
      // There is no top padding, so don't compensate for it
      &:first-child,
      &.first-child {
        margin-top: 0;
      }
    }

    // -- rework block spacing and positioning for multi-col layouts

    .layout--2-col--content-blocks &,
    .layout--3-col--content-blocks &,
    .layout--4-col--content-blocks & {
      // with the block positioned absolutely,
      // no need to worry about spacing,
      // since block will overlap with the layout padding
      &:first-child,
      &.first-child {
        margin-top: 0;
      }
      &:last-child,
      &.last-child {
        margin-bottom: 0;
      }
    }

    // ** positioning & sizing depending on col size

    // for stretched images
    .layout__region--size-5-12 & {
      width: (100vw / 12 * 5); // calc(#{100vw / 2} - #{100%  / 12} - #{rem(($cb-gap-hor / 12 * 5) / 3) / 2});
    }

    .layout__region--size-7-12 & {
      width: (100vw / 12 * 7); // calc(#{100vw / 2} + #{100%  / 12} + #{rem(($cb-gap-hor / 12 * 7) / 3) / 2});
    }
  }
}
