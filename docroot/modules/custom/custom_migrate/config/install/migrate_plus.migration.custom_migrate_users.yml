# Машинное имя миграции.
id: custom_migrate_users
label: 'Users'
# Группы добавляются модулем Migrate Plus, это его настройка.
migration_group: custom_migrate
# Данная настройка не обзятельна и позволяет задавать теги миграциям.
# Например, вы можете сделать два источника для пользоватетелей из разных мест
# пометить тегами user и запускать их на выполнение одновременно при помощи
# общего тега.
migration_tags:
  - user
# Описываем источник данных.
source:
  # Тип плагина при помощи которого получаются данные.
  plugin: custom_migrate_csv
  module: custom_migrate
  # Его настройки.
  path: assets/users.csv
  delimiter: ';'
  enclosure: '"'
  # Так как первая строка используется для заголовков в файле, мы должны её
  # пропускать, чтобы они не ушли на импорт.
  header_row_count: 1
  columns:
    0:
      key: id
      label: 'User id'
    1:
      key: name
      label: 'User name'
    2:
      key: email
      label: 'User email'
  # Ключи данного источника. Данный плагин требует указание ключей в виде
  # массива, так что даже единственный ключ должен объявляться как массив.
  key: id
  # Ниже константы для данной миграции. Это уже особенность миграций, а не
  # конкретного плагина и работает со всеми.
  constants:
    # Статус для аккаунта пользоваетля — активный. Все пользователи будут
    # активны.
    status: 1
    # Наши пользователи получат две роли, авторизованный и администратор.
    roles:
      - authenticated
      - administrator
# Описываем процесс миграции что и куда нужно передать.
process:
  mail: email
  # init — это email который был использован при регистрации, когда mail текущий
  init: email
  status: 'constants/status'
  roles: 'constants/roles'
  name: name
# Описываем то, куда эти данные должны быть смигрированы.
destination:
  plugin: entity:user
# В данном разделе указывается от каких миграций зависит текущая. У нас данная
# миграция не зависит от други, поэтому оставляем значением пустым массивом.
migration_dependencies: {}
# В данном разделе мы указываем от каких модулей зависит данная миграция,
# включая текущий. Так, при удалении модуля, удалятся и даныне конфигурации
# и при следующем включении не будет конфликта что уже имеются данные
# кофигурации. В случае со сторонними модулями, не будет проблемы что нет
# какого-то плагина. Это больше от Configuration API чем от миграций.
dependencies:
  enforced:
    module:
      - custom_migrate
      - migrate_source_csv
