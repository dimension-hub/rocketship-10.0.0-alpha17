/* stylelint-disable */
@charset "UTF-8";

////////////////////////////////////////////////////////////////////////////////
// *
// * Visual grid
// *
// * visualize a grid using an overlay
// *
////////////////////////////////////////////////////////////////////////////////


// @import "00-base/00-config/_mixins-00-breakpoints.scss";

@mixin grid-column-gradient($values...) {
  background-image: -webkit-linear-gradient(left, $values);
  background-image: -moz-linear-gradient(left, $values);
  background-image: -ms-linear-gradient(left, $values);
  background-image: -o-linear-gradient(left, $values);
  background-image: unquote("linear-gradient(to left, #{$values})");
}

$l: ();

@for $i from 1 through $grid-columns {
  $j: $i + 1;
  $l: append($l, rgba($visual-grid-color, 1) calc(#{(100% / $grid-columns * $i)} + #{$grid-gap-hor}), comma);
  $l: append($l, rgba($visual-grid-color, 1) calc(#{(100% / $grid-columns * $j)} - #{$grid-gap-hor}), comma);
  $l: append($l, rgba($visual-grid-color, 0) calc(#{(100% / $grid-columns * $j)}  - #{$grid-gap-hor}), comma);
  $l: append($l, rgba($visual-grid-color, 0) calc(#{(100% / $grid-columns * $j)}  + #{$grid-gap-hor}), comma);
}

@if $visual-grid == true or $visual-grid == yes {
  body::before {
    position: fixed !important;
    right: 0 !important;
    left: 0 !important;
    display: inline-block !important;
    height: 100% !important;
    width: 100% !important;
    margin: 0 auto !important;

    background-image: linear-gradient(to right, rgba($visual-grid-color, 0) 0, rgba($visual-grid-color, 0) #{($grid-gap-hor)}, rgba($visual-grid-color, 1) #{($grid-gap-hor)}, rgba($visual-grid-color, 1) calc(#{(100% / 2 * 1)} - #{$grid-gap-hor}), rgba($visual-grid-color, 0) calc(#{(100% / 2 * 1)} - #{$grid-gap-hor}), rgba($visual-grid-color, 0) calc(#{(100% / 2 * 1)} + #{$grid-gap-hor}), rgba($visual-grid-color, 1) calc(#{(100% / 2 * 1)} + #{$grid-gap-hor}), rgba($visual-grid-color, 1) calc(#{(100% / 2 * 2)} - #{$grid-gap-hor}), rgba($visual-grid-color, 0) calc(#{(100% / 2 * 2)} - #{$grid-gap-hor}), rgba($visual-grid-color, 0) 100%);
    content: "" !important;
    opacity: $visual-grid-opacity;
    pointer-events: none !important;

    @if $visual-grid-index == back {
      z-index: -1 !important;
    }

    @else if $visual-grid-index == front {
      @include z-index(grid-overlay, important);
    }

    @include bp-sm {
      max-width: none;
      background-image: linear-gradient(to right, rgba($visual-grid-color, 0) 0, rgba($visual-grid-color, 0) #{($grid-gap-hor)}, rgba($visual-grid-color, 1) #{($grid-gap-hor)}, rgba($visual-grid-color, 1) calc(#{(100% / $grid-columns * 1)} - #{$grid-gap-hor}), rgba($visual-grid-color, 0) calc(#{(100% / $grid-columns * 1)} - #{$grid-gap-hor}), rgba($visual-grid-color, 0) calc(#{(100% / $grid-columns * 1)} + #{$grid-gap-hor}), $l, rgba($visual-grid-color, 1) calc(#{(100% / $grid-columns * ($grid-columns - 1))} + #{$grid-gap-hor}), rgba($visual-grid-color, 1) calc(#{(100% / $grid-columns * $grid-columns)} - #{$grid-gap-hor}), rgba($visual-grid-color, 0) calc(#{(100% / $grid-columns * $grid-columns)} - #{$grid-gap-hor}), rgba($visual-grid-color, 0) 100%);
    }

    @include bp-md {
      max-width: $max-width-md !important;
    }

    @include bp-lg {
      max-width: $max-width !important;
    }
  }
}
/* stylelint-enable */
