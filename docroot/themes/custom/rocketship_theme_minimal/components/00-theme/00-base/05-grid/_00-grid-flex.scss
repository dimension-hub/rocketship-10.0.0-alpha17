////////////////////////////////////////////////////////////////////////////////
// *
// * CSS grid
// *
// * More on Flexbox (used here for fallback):
//    https://css-tricks.com/snippets/css/complete-guide-grid/
//
////////////////////////////////////////////////////////////////////////////////


// * Flex-row mixins
// =============================================================================

// ** make a uniform grid (columns, mostly)
//
//    Variables:
//    - $columns: total columns of your grid system
//    - $gap: gap between the columns
@mixin flex-grid($columns: $grid-columns, $gap: $grid-gap-hor) {
  position: relative;
  display: flex;
  flex-wrap: wrap;
  min-height: 1px;
  margin-left: rem(-$gap / 2);
  margin-right: rem(-$gap / 2);
}


// ** set width of individual grid cell
//
//    Variables:
//    - $number: number of columns your item is wide OR "auto" for autosizing
//    - $columns: total columns of your grid system
//    - $gap: gap between the columns
@mixin flex-col($number, $columns: $grid-columns, $gap: $grid-gap-hor) {
  position: relative;
  margin-left: rem($gap / 2);
  margin-right: rem($gap / 2);
  min-height: 1px;

  @if ($number == "auto") {
    flex: 1 1 auto;
    flex-basis: auto;
    width: 100%; // mainly for IE
    max-width: none;

  } @else {
    // IE doesn't do box-sizing: border-box when using flex/flex--basis, so can't use it
    // IE11 doesn't understand calc() in shorthand flex, so need to set flex-basis explicitely
    // And if you happen to use flex-basis to size stuff, you need an explicit width or max-width as well
    // So probably best to not set flex-basis at all
    // eg. flex: 0 0 calc(#{100% * $number / $columns} - #{rem($gap-hor)});
    //     flex-basis: calc(#{100% * $number / $columns} - #{rem($gap-hor)});
    flex: 0 0 auto;
    flex-basis: auto;
    width: calc(#{100% * $number / $columns} - #{rem($gap-hor)});
  }
}


// ** pull using position relative
//
//    Variables:
//    - $size: number of columns to move
//    - $columns: total columns of your grid system
//    - $gap: gap between the columns
@mixin flex-col-pull($number, $columns: $grid-columns, $gap: $grid-gap-hor) {
  position: relative;
  left: #{100% * -$number / $columns};
}

// ** push using margin relative
//
//    Variables:
//    - $size: number of columns to move
//    - $columns: total columns of your grid system
//    - $gap: gap between the columns
@mixin flex-col-push($number, $columns: $grid-columns, $gap: $grid-gap-hor) {
  position: relative;
  left: #{100% * $number / $columns};
}


// ** create cells that span multiple rows: this is for the row wrapper

@mixin flex-rows($height, $columns: $grid-columns, $gap: $grid-gap-hor) {
  position: relative;
  display: flex;
  flex-wrap: wrap;
  flex-direction: column; // very important !!!
  height: $height; // need a height in order to stretch over
  margin-left: #{rem(-$gap / 2)};
  margin-right: #{rem(-$gap / 2)};
}

// ** create cells that span multiple rows: this is for cells
//    don't forget to mess around with "order" to get the order you need

@mixin flex-row($height, $rows: 2, $gap: $grid-gap-hor) {
  flex: 0 0 calc(#{100% * $height / $rows} - #{rem($gap)});
  // IE11 doesn't understand calc() in shorthand
  flex-basis: calc(#{100% * $height / $rows} - #{rem($gap)});
}
